import { parse } from "../deps.ts";

interface Route {
  path: string;
  name: string;
  fileName: string;
}

const routes: Route[] = [];

export async function generate(
  path = "pages",
): Promise<void> {
  await scan(path);
  write(path);

  // Emptying the array
  routes.length = 0;
}

async function scan(path: string): Promise<void> {
  try {
    for await (const entry of Deno.readDir(path)) {
      if (entry.isFile) {
        routes.push({
          path: path,
          name: parse(entry.name).name,
          fileName: entry.name,
        });
      }
      if (entry.isDirectory) {
        await scan(`${path}/${entry.name}`);
      }
    }
  } catch (_err: unknown) {
    console.error(`Not able to load files from the "${path}" directory `);
  }
}

async function write(path: string) {
  const content =
    `// This file is automatically generated by Cargo Parcel during its bootstrapping process. Do not edit it manually.
    
${imports()}

export const routes = {
  ${exports(path)}
}`;

  await Deno.writeTextFile(".routes.ts", content);
}

function imports(): string {
  return routes.map((route, index) => {
    return `import * as P${index} from "./${route.path}/${route.fileName}";`;
  }).join("\n");
}

function exports(path: string): string {
  return routes.map((route, index) => {
    return `"${route.path.replace(path, "")}/${route.name}": P${index},`;
  }).join("\n  ");
}
