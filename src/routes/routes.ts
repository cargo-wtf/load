import { parse, parseArgs } from "../deps.ts";

interface Route {
  path: string;
  name: string;
  fileName: string;
}

const routes: Route[] = [];

export default async (
  args: string[],
): Promise<string> => {
  const options = parseArgs(args);
  const path = options.path || "pages";

  await scan(path);
  write(path);

  // Emptying the array
  routes.length = 0;
  return `File ".routes.ts" sucessfully created!`;
};

async function scan(path: string): Promise<void> {
  try {
    for await (const entry of Deno.readDir(path)) {
      if (entry.isFile) {
        routes.push({
          path: path,
          name: parse(entry.name).name,
          fileName: entry.name,
        });
      }
      if (entry.isDirectory) {
        await scan(`${path}/${entry.name}`);
      }
    }
  } catch (err) {
    if (Deno.errors.NotFound) {
      console.error(`Directory "${path}" does not exist.`);
      return;
    }
    console.error(`Not able to load files from the "${path}" directory.`);
  }
}

async function write(path: string) {
  const content =
    `// This file is automatically generated by the Cargo Load "routes" command. Do not edit it manually.
    
${imports()}

export const routes = {
  ${exports(path)}
}`;

  await Deno.writeTextFile(".routes.ts", content);
}

function imports(): string {
  return routes.map((route, index) => {
    return `import * as P${index} from "./${route.path}/${route.fileName}";`;
  }).join("\n");
}

function exports(path: string): string {
  return routes.map((route, index) => {
    return `"${route.path.replace(path, "")}/${route.name}": P${index},`;
  }).join("\n  ");
}
